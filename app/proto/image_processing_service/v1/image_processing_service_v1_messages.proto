syntax = "proto3";

package image_processing_service;
option go_package = "image_processing_service/v1/protos";
import "google/api/annotations.proto";


message ImageResponce {
    // Image file as bytes
    bytes image = 1[json_name="image"];
}

message Image {
    // Image file as bytes (supports base64 encoding)
    bytes image = 1[json_name="image"];
}


message CropRequest {
    Image image = 1;
    // rectangle coordinate x0
    uint32 StartX=2[json_name="start_x"];
    // rectangle coordinate y0
    uint32 StartY=3[json_name="start_y"];
    // rectangle coordinate x1
    uint32 EndX = 4[json_name="end_x"];
    // rectangle coordinate y1
    uint32 EndY = 5[json_name="end_y"];
}

enum ResampleFilter {
    //		A high-quality resampling filter for photographic images yielding sharp results.
    Lanczos = 0;

    //		A sharp cubic filter that is faster than Lanczos filter while providing similar results.
    CatmullRom = 1;

    //		A cubic filter that produces smoother results with less ringing artifacts than CatmullRom.
    MitchellNetravali = 2;

    //		Bilinear resampling filter, produces a smooth output. Faster than cubic filters.
    Linear = 3;

    //		Simple and fast averaging filter appropriate for downscaling.
    //		When upscaling it's similar to NearestNeighbor.
    Box = 4;
    
    //		Fastest resampling filter, no antialiasing.
    NearestNeighbor = 5;
};

message ResizeRequest {
    Image image = 1;
    ResampleFilter ResampleFilter = 2[json_name="resample_filter"];
    int32 Width = 3[json_name="width"];
    int32 Height = 4[json_name="height"];
}

message ValidateRequest {
    Image image = 1;

    optional int32 MaxWidth = 2[json_name="max_width"];
    optional int32 MaxHeight = 3[json_name="max_height"];
    optional int32 MinWidth = 4[json_name="min_width"];
    optional int32 MinHeight = 5[json_name="min_height"];
    
    // List of image types, checking for the occurrence of an image type in the list
    repeated string SupportedTypes = 6[json_name="supported_types"];
}

message ValidateResponce {
    bool ImageValid = 1[json_name="image_valid"];
    // Returns when image not passed, a message describing why the image failed validation
    optional string Details = 2[json_name="details"];
}

message UserErrorMessage {
    string Message = 1[json_name="message"];
}


message HueRequest {
    Image image = 1;

    // between -360 and 360
    int32 hue = 2;
}


message BlurRequest {
    Image image = 1;

    double blur_radius = 2;
    enum BlurMethod {
        Box = 0;
        Gaussian = 1;
    }
    BlurMethod method = 3;
} 